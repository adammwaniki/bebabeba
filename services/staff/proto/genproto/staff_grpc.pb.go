//services/staff/proto/staff.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: staff.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StaffService_CreateDriver_FullMethodName             = "/staff.StaffService/CreateDriver"
	StaffService_GetDriver_FullMethodName                = "/staff.StaffService/GetDriver"
	StaffService_GetDriverByUserID_FullMethodName        = "/staff.StaffService/GetDriverByUserID"
	StaffService_ListDrivers_FullMethodName              = "/staff.StaffService/ListDrivers"
	StaffService_UpdateDriver_FullMethodName             = "/staff.StaffService/UpdateDriver"
	StaffService_DeleteDriver_FullMethodName             = "/staff.StaffService/DeleteDriver"
	StaffService_UpdateDriverStatus_FullMethodName       = "/staff.StaffService/UpdateDriverStatus"
	StaffService_GetActiveDrivers_FullMethodName         = "/staff.StaffService/GetActiveDrivers"
	StaffService_AddDriverCertification_FullMethodName   = "/staff.StaffService/AddDriverCertification"
	StaffService_ListDriverCertifications_FullMethodName = "/staff.StaffService/ListDriverCertifications"
	StaffService_UpdateCertification_FullMethodName      = "/staff.StaffService/UpdateCertification"
	StaffService_DeleteCertification_FullMethodName      = "/staff.StaffService/DeleteCertification"
	StaffService_VerifyDriverLicense_FullMethodName      = "/staff.StaffService/VerifyDriverLicense"
	StaffService_GetExpiringLicenses_FullMethodName      = "/staff.StaffService/GetExpiringLicenses"
	StaffService_GetExpiredCertifications_FullMethodName = "/staff.StaffService/GetExpiredCertifications"
)

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	// Driver CRUD operations
	CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*CreateDriverResponse, error)
	GetDriver(ctx context.Context, in *GetDriverRequest, opts ...grpc.CallOption) (*GetDriverResponse, error)
	GetDriverByUserID(ctx context.Context, in *GetDriverByUserIDRequest, opts ...grpc.CallOption) (*GetDriverResponse, error)
	ListDrivers(ctx context.Context, in *ListDriversRequest, opts ...grpc.CallOption) (*ListDriversResponse, error)
	UpdateDriver(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*UpdateDriverResponse, error)
	DeleteDriver(ctx context.Context, in *DeleteDriverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Driver status management
	UpdateDriverStatus(ctx context.Context, in *UpdateDriverStatusRequest, opts ...grpc.CallOption) (*UpdateDriverStatusResponse, error)
	GetActiveDrivers(ctx context.Context, in *GetActiveDriversRequest, opts ...grpc.CallOption) (*ListDriversResponse, error)
	// Driver certification management
	AddDriverCertification(ctx context.Context, in *AddDriverCertificationRequest, opts ...grpc.CallOption) (*AddDriverCertificationResponse, error)
	ListDriverCertifications(ctx context.Context, in *ListDriverCertificationsRequest, opts ...grpc.CallOption) (*ListDriverCertificationsResponse, error)
	UpdateCertification(ctx context.Context, in *UpdateCertificationRequest, opts ...grpc.CallOption) (*UpdateCertificationResponse, error)
	DeleteCertification(ctx context.Context, in *DeleteCertificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Driver verification and compliance
	VerifyDriverLicense(ctx context.Context, in *VerifyDriverLicenseRequest, opts ...grpc.CallOption) (*VerifyDriverLicenseResponse, error)
	GetExpiringLicenses(ctx context.Context, in *GetExpiringLicensesRequest, opts ...grpc.CallOption) (*ListDriversResponse, error)
	GetExpiredCertifications(ctx context.Context, in *GetExpiredCertificationsRequest, opts ...grpc.CallOption) (*ListDriverCertificationsResponse, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) CreateDriver(ctx context.Context, in *CreateDriverRequest, opts ...grpc.CallOption) (*CreateDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDriverResponse)
	err := c.cc.Invoke(ctx, StaffService_CreateDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetDriver(ctx context.Context, in *GetDriverRequest, opts ...grpc.CallOption) (*GetDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDriverResponse)
	err := c.cc.Invoke(ctx, StaffService_GetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetDriverByUserID(ctx context.Context, in *GetDriverByUserIDRequest, opts ...grpc.CallOption) (*GetDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDriverResponse)
	err := c.cc.Invoke(ctx, StaffService_GetDriverByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListDrivers(ctx context.Context, in *ListDriversRequest, opts ...grpc.CallOption) (*ListDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDriversResponse)
	err := c.cc.Invoke(ctx, StaffService_ListDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateDriver(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*UpdateDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDriverResponse)
	err := c.cc.Invoke(ctx, StaffService_UpdateDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) DeleteDriver(ctx context.Context, in *DeleteDriverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StaffService_DeleteDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateDriverStatus(ctx context.Context, in *UpdateDriverStatusRequest, opts ...grpc.CallOption) (*UpdateDriverStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDriverStatusResponse)
	err := c.cc.Invoke(ctx, StaffService_UpdateDriverStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetActiveDrivers(ctx context.Context, in *GetActiveDriversRequest, opts ...grpc.CallOption) (*ListDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDriversResponse)
	err := c.cc.Invoke(ctx, StaffService_GetActiveDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) AddDriverCertification(ctx context.Context, in *AddDriverCertificationRequest, opts ...grpc.CallOption) (*AddDriverCertificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDriverCertificationResponse)
	err := c.cc.Invoke(ctx, StaffService_AddDriverCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListDriverCertifications(ctx context.Context, in *ListDriverCertificationsRequest, opts ...grpc.CallOption) (*ListDriverCertificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDriverCertificationsResponse)
	err := c.cc.Invoke(ctx, StaffService_ListDriverCertifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateCertification(ctx context.Context, in *UpdateCertificationRequest, opts ...grpc.CallOption) (*UpdateCertificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCertificationResponse)
	err := c.cc.Invoke(ctx, StaffService_UpdateCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) DeleteCertification(ctx context.Context, in *DeleteCertificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StaffService_DeleteCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) VerifyDriverLicense(ctx context.Context, in *VerifyDriverLicenseRequest, opts ...grpc.CallOption) (*VerifyDriverLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyDriverLicenseResponse)
	err := c.cc.Invoke(ctx, StaffService_VerifyDriverLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetExpiringLicenses(ctx context.Context, in *GetExpiringLicensesRequest, opts ...grpc.CallOption) (*ListDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDriversResponse)
	err := c.cc.Invoke(ctx, StaffService_GetExpiringLicenses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetExpiredCertifications(ctx context.Context, in *GetExpiredCertificationsRequest, opts ...grpc.CallOption) (*ListDriverCertificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDriverCertificationsResponse)
	err := c.cc.Invoke(ctx, StaffService_GetExpiredCertifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations must embed UnimplementedStaffServiceServer
// for forward compatibility.
type StaffServiceServer interface {
	// Driver CRUD operations
	CreateDriver(context.Context, *CreateDriverRequest) (*CreateDriverResponse, error)
	GetDriver(context.Context, *GetDriverRequest) (*GetDriverResponse, error)
	GetDriverByUserID(context.Context, *GetDriverByUserIDRequest) (*GetDriverResponse, error)
	ListDrivers(context.Context, *ListDriversRequest) (*ListDriversResponse, error)
	UpdateDriver(context.Context, *UpdateDriverRequest) (*UpdateDriverResponse, error)
	DeleteDriver(context.Context, *DeleteDriverRequest) (*emptypb.Empty, error)
	// Driver status management
	UpdateDriverStatus(context.Context, *UpdateDriverStatusRequest) (*UpdateDriverStatusResponse, error)
	GetActiveDrivers(context.Context, *GetActiveDriversRequest) (*ListDriversResponse, error)
	// Driver certification management
	AddDriverCertification(context.Context, *AddDriverCertificationRequest) (*AddDriverCertificationResponse, error)
	ListDriverCertifications(context.Context, *ListDriverCertificationsRequest) (*ListDriverCertificationsResponse, error)
	UpdateCertification(context.Context, *UpdateCertificationRequest) (*UpdateCertificationResponse, error)
	DeleteCertification(context.Context, *DeleteCertificationRequest) (*emptypb.Empty, error)
	// Driver verification and compliance
	VerifyDriverLicense(context.Context, *VerifyDriverLicenseRequest) (*VerifyDriverLicenseResponse, error)
	GetExpiringLicenses(context.Context, *GetExpiringLicensesRequest) (*ListDriversResponse, error)
	GetExpiredCertifications(context.Context, *GetExpiredCertificationsRequest) (*ListDriverCertificationsResponse, error)
	mustEmbedUnimplementedStaffServiceServer()
}

// UnimplementedStaffServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStaffServiceServer struct{}

func (UnimplementedStaffServiceServer) CreateDriver(context.Context, *CreateDriverRequest) (*CreateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDriver not implemented")
}
func (UnimplementedStaffServiceServer) GetDriver(context.Context, *GetDriverRequest) (*GetDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriver not implemented")
}
func (UnimplementedStaffServiceServer) GetDriverByUserID(context.Context, *GetDriverByUserIDRequest) (*GetDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverByUserID not implemented")
}
func (UnimplementedStaffServiceServer) ListDrivers(context.Context, *ListDriversRequest) (*ListDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrivers not implemented")
}
func (UnimplementedStaffServiceServer) UpdateDriver(context.Context, *UpdateDriverRequest) (*UpdateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriver not implemented")
}
func (UnimplementedStaffServiceServer) DeleteDriver(context.Context, *DeleteDriverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDriver not implemented")
}
func (UnimplementedStaffServiceServer) UpdateDriverStatus(context.Context, *UpdateDriverStatusRequest) (*UpdateDriverStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverStatus not implemented")
}
func (UnimplementedStaffServiceServer) GetActiveDrivers(context.Context, *GetActiveDriversRequest) (*ListDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDrivers not implemented")
}
func (UnimplementedStaffServiceServer) AddDriverCertification(context.Context, *AddDriverCertificationRequest) (*AddDriverCertificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDriverCertification not implemented")
}
func (UnimplementedStaffServiceServer) ListDriverCertifications(context.Context, *ListDriverCertificationsRequest) (*ListDriverCertificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriverCertifications not implemented")
}
func (UnimplementedStaffServiceServer) UpdateCertification(context.Context, *UpdateCertificationRequest) (*UpdateCertificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertification not implemented")
}
func (UnimplementedStaffServiceServer) DeleteCertification(context.Context, *DeleteCertificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCertification not implemented")
}
func (UnimplementedStaffServiceServer) VerifyDriverLicense(context.Context, *VerifyDriverLicenseRequest) (*VerifyDriverLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDriverLicense not implemented")
}
func (UnimplementedStaffServiceServer) GetExpiringLicenses(context.Context, *GetExpiringLicensesRequest) (*ListDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiringLicenses not implemented")
}
func (UnimplementedStaffServiceServer) GetExpiredCertifications(context.Context, *GetExpiredCertificationsRequest) (*ListDriverCertificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiredCertifications not implemented")
}
func (UnimplementedStaffServiceServer) mustEmbedUnimplementedStaffServiceServer() {}
func (UnimplementedStaffServiceServer) testEmbeddedByValue()                      {}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	// If the following call pancis, it indicates UnimplementedStaffServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_CreateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).CreateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_CreateDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).CreateDriver(ctx, req.(*CreateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetDriver(ctx, req.(*GetDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetDriverByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriverByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetDriverByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetDriverByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetDriverByUserID(ctx, req.(*GetDriverByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListDrivers(ctx, req.(*ListDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_UpdateDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateDriver(ctx, req.(*UpdateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_DeleteDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).DeleteDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_DeleteDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).DeleteDriver(ctx, req.(*DeleteDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateDriverStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateDriverStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_UpdateDriverStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateDriverStatus(ctx, req.(*UpdateDriverStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetActiveDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetActiveDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetActiveDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetActiveDrivers(ctx, req.(*GetActiveDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_AddDriverCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDriverCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).AddDriverCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_AddDriverCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).AddDriverCertification(ctx, req.(*AddDriverCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListDriverCertifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriverCertificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListDriverCertifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ListDriverCertifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListDriverCertifications(ctx, req.(*ListDriverCertificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_UpdateCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateCertification(ctx, req.(*UpdateCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_DeleteCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).DeleteCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_DeleteCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).DeleteCertification(ctx, req.(*DeleteCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_VerifyDriverLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDriverLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).VerifyDriverLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_VerifyDriverLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).VerifyDriverLicense(ctx, req.(*VerifyDriverLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetExpiringLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpiringLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetExpiringLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetExpiringLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetExpiringLicenses(ctx, req.(*GetExpiringLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetExpiredCertifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpiredCertificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetExpiredCertifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_GetExpiredCertifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetExpiredCertifications(ctx, req.(*GetExpiredCertificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staff.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDriver",
			Handler:    _StaffService_CreateDriver_Handler,
		},
		{
			MethodName: "GetDriver",
			Handler:    _StaffService_GetDriver_Handler,
		},
		{
			MethodName: "GetDriverByUserID",
			Handler:    _StaffService_GetDriverByUserID_Handler,
		},
		{
			MethodName: "ListDrivers",
			Handler:    _StaffService_ListDrivers_Handler,
		},
		{
			MethodName: "UpdateDriver",
			Handler:    _StaffService_UpdateDriver_Handler,
		},
		{
			MethodName: "DeleteDriver",
			Handler:    _StaffService_DeleteDriver_Handler,
		},
		{
			MethodName: "UpdateDriverStatus",
			Handler:    _StaffService_UpdateDriverStatus_Handler,
		},
		{
			MethodName: "GetActiveDrivers",
			Handler:    _StaffService_GetActiveDrivers_Handler,
		},
		{
			MethodName: "AddDriverCertification",
			Handler:    _StaffService_AddDriverCertification_Handler,
		},
		{
			MethodName: "ListDriverCertifications",
			Handler:    _StaffService_ListDriverCertifications_Handler,
		},
		{
			MethodName: "UpdateCertification",
			Handler:    _StaffService_UpdateCertification_Handler,
		},
		{
			MethodName: "DeleteCertification",
			Handler:    _StaffService_DeleteCertification_Handler,
		},
		{
			MethodName: "VerifyDriverLicense",
			Handler:    _StaffService_VerifyDriverLicense_Handler,
		},
		{
			MethodName: "GetExpiringLicenses",
			Handler:    _StaffService_GetExpiringLicenses_Handler,
		},
		{
			MethodName: "GetExpiredCertifications",
			Handler:    _StaffService_GetExpiredCertifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff.proto",
}
