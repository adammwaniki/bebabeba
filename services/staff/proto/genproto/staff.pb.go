//services/staff/proto/staff.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: staff.proto

package genproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ================= Enums =================
type DriverStatus int32

const (
	DriverStatus_STATUS_UNSPECIFIED   DriverStatus = 0
	DriverStatus_PENDING_VERIFICATION DriverStatus = 1
	DriverStatus_ACTIVE               DriverStatus = 2
	DriverStatus_SUSPENDED            DriverStatus = 3
	DriverStatus_INACTIVE             DriverStatus = 4
)

// Enum value maps for DriverStatus.
var (
	DriverStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING_VERIFICATION",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "INACTIVE",
	}
	DriverStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED":   0,
		"PENDING_VERIFICATION": 1,
		"ACTIVE":               2,
		"SUSPENDED":            3,
		"INACTIVE":             4,
	}
)

func (x DriverStatus) Enum() *DriverStatus {
	p := new(DriverStatus)
	*p = x
	return p
}

func (x DriverStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriverStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_staff_proto_enumTypes[0].Descriptor()
}

func (DriverStatus) Type() protoreflect.EnumType {
	return &file_staff_proto_enumTypes[0]
}

func (x DriverStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriverStatus.Descriptor instead.
func (DriverStatus) EnumDescriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{0}
}

type LicenseClass int32

const (
	LicenseClass_LICENSE_UNSPECIFIED LicenseClass = 0
	LicenseClass_CLASS_A             LicenseClass = 1 // Motorcycles (bodaboda)
	LicenseClass_CLASS_B             LicenseClass = 2 // Light vehicles (cars, vans, pickup trucks)
	LicenseClass_CLASS_C             LicenseClass = 3 // Medium vehicles (trucks, buses)
	LicenseClass_CLASS_D             LicenseClass = 4 // Heavy vehicles (large trucks, buses)
	LicenseClass_CLASS_E             LicenseClass = 5 // Commercial passenger vehicles
)

// Enum value maps for LicenseClass.
var (
	LicenseClass_name = map[int32]string{
		0: "LICENSE_UNSPECIFIED",
		1: "CLASS_A",
		2: "CLASS_B",
		3: "CLASS_C",
		4: "CLASS_D",
		5: "CLASS_E",
	}
	LicenseClass_value = map[string]int32{
		"LICENSE_UNSPECIFIED": 0,
		"CLASS_A":             1,
		"CLASS_B":             2,
		"CLASS_C":             3,
		"CLASS_D":             4,
		"CLASS_E":             5,
	}
)

func (x LicenseClass) Enum() *LicenseClass {
	p := new(LicenseClass)
	*p = x
	return p
}

func (x LicenseClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseClass) Descriptor() protoreflect.EnumDescriptor {
	return file_staff_proto_enumTypes[1].Descriptor()
}

func (LicenseClass) Type() protoreflect.EnumType {
	return &file_staff_proto_enumTypes[1]
}

func (x LicenseClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseClass.Descriptor instead.
func (LicenseClass) EnumDescriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{1}
}

type CertificationStatus int32

const (
	CertificationStatus_CERT_STATUS_UNSPECIFIED CertificationStatus = 0
	CertificationStatus_CERT_ACTIVE             CertificationStatus = 1
	CertificationStatus_CERT_EXPIRED            CertificationStatus = 2
	CertificationStatus_CERT_SUSPENDED          CertificationStatus = 3
	CertificationStatus_CERT_REVOKED            CertificationStatus = 4
)

// Enum value maps for CertificationStatus.
var (
	CertificationStatus_name = map[int32]string{
		0: "CERT_STATUS_UNSPECIFIED",
		1: "CERT_ACTIVE",
		2: "CERT_EXPIRED",
		3: "CERT_SUSPENDED",
		4: "CERT_REVOKED",
	}
	CertificationStatus_value = map[string]int32{
		"CERT_STATUS_UNSPECIFIED": 0,
		"CERT_ACTIVE":             1,
		"CERT_EXPIRED":            2,
		"CERT_SUSPENDED":          3,
		"CERT_REVOKED":            4,
	}
)

func (x CertificationStatus) Enum() *CertificationStatus {
	p := new(CertificationStatus)
	*p = x
	return p
}

func (x CertificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_staff_proto_enumTypes[2].Descriptor()
}

func (CertificationStatus) Type() protoreflect.EnumType {
	return &file_staff_proto_enumTypes[2]
}

func (x CertificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificationStatus.Descriptor instead.
func (CertificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{2}
}

// ================= Core Driver Messages =================
type Driver struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // external_id
	UserId                string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // reference to user service
	LicenseNumber         string                 `protobuf:"bytes,3,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	LicenseClass          LicenseClass           `protobuf:"varint,4,opt,name=license_class,json=licenseClass,proto3,enum=staff.LicenseClass" json:"license_class,omitempty"`
	LicenseExpiry         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=license_expiry,json=licenseExpiry,proto3" json:"license_expiry,omitempty"`
	ExperienceYears       int32                  `protobuf:"varint,6,opt,name=experience_years,json=experienceYears,proto3" json:"experience_years,omitempty"`
	PhoneNumber           string                 `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	EmergencyContactName  string                 `protobuf:"bytes,8,opt,name=emergency_contact_name,json=emergencyContactName,proto3" json:"emergency_contact_name,omitempty"`
	EmergencyContactPhone string                 `protobuf:"bytes,9,opt,name=emergency_contact_phone,json=emergencyContactPhone,proto3" json:"emergency_contact_phone,omitempty"`
	Status                DriverStatus           `protobuf:"varint,10,opt,name=status,proto3,enum=staff.DriverStatus" json:"status,omitempty"`
	HireDate              *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=hire_date,json=hireDate,proto3" json:"hire_date,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Computed fields for convenience
	LicenseExpired         bool                   `protobuf:"varint,14,opt,name=license_expired,json=licenseExpired,proto3" json:"license_expired,omitempty"`
	DaysUntilLicenseExpiry int32                  `protobuf:"varint,15,opt,name=days_until_license_expiry,json=daysUntilLicenseExpiry,proto3" json:"days_until_license_expiry,omitempty"`
	Certifications         []*DriverCertification `protobuf:"bytes,16,rep,name=certifications,proto3" json:"certifications,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Driver) Reset() {
	*x = Driver{}
	mi := &file_staff_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{0}
}

func (x *Driver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Driver) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Driver) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *Driver) GetLicenseClass() LicenseClass {
	if x != nil {
		return x.LicenseClass
	}
	return LicenseClass_LICENSE_UNSPECIFIED
}

func (x *Driver) GetLicenseExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.LicenseExpiry
	}
	return nil
}

func (x *Driver) GetExperienceYears() int32 {
	if x != nil {
		return x.ExperienceYears
	}
	return 0
}

func (x *Driver) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Driver) GetEmergencyContactName() string {
	if x != nil {
		return x.EmergencyContactName
	}
	return ""
}

func (x *Driver) GetEmergencyContactPhone() string {
	if x != nil {
		return x.EmergencyContactPhone
	}
	return ""
}

func (x *Driver) GetStatus() DriverStatus {
	if x != nil {
		return x.Status
	}
	return DriverStatus_STATUS_UNSPECIFIED
}

func (x *Driver) GetHireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.HireDate
	}
	return nil
}

func (x *Driver) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Driver) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Driver) GetLicenseExpired() bool {
	if x != nil {
		return x.LicenseExpired
	}
	return false
}

func (x *Driver) GetDaysUntilLicenseExpiry() int32 {
	if x != nil {
		return x.DaysUntilLicenseExpiry
	}
	return 0
}

func (x *Driver) GetCertifications() []*DriverCertification {
	if x != nil {
		return x.Certifications
	}
	return nil
}

type DriverInput struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	UserId                string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LicenseNumber         string                 `protobuf:"bytes,2,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	LicenseClass          LicenseClass           `protobuf:"varint,3,opt,name=license_class,json=licenseClass,proto3,enum=staff.LicenseClass" json:"license_class,omitempty"`
	LicenseExpiry         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=license_expiry,json=licenseExpiry,proto3" json:"license_expiry,omitempty"`
	ExperienceYears       int32                  `protobuf:"varint,5,opt,name=experience_years,json=experienceYears,proto3" json:"experience_years,omitempty"`
	PhoneNumber           string                 `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	EmergencyContactName  string                 `protobuf:"bytes,7,opt,name=emergency_contact_name,json=emergencyContactName,proto3" json:"emergency_contact_name,omitempty"`
	EmergencyContactPhone string                 `protobuf:"bytes,8,opt,name=emergency_contact_phone,json=emergencyContactPhone,proto3" json:"emergency_contact_phone,omitempty"`
	HireDate              *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=hire_date,json=hireDate,proto3" json:"hire_date,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DriverInput) Reset() {
	*x = DriverInput{}
	mi := &file_staff_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverInput) ProtoMessage() {}

func (x *DriverInput) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverInput.ProtoReflect.Descriptor instead.
func (*DriverInput) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{1}
}

func (x *DriverInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DriverInput) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *DriverInput) GetLicenseClass() LicenseClass {
	if x != nil {
		return x.LicenseClass
	}
	return LicenseClass_LICENSE_UNSPECIFIED
}

func (x *DriverInput) GetLicenseExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.LicenseExpiry
	}
	return nil
}

func (x *DriverInput) GetExperienceYears() int32 {
	if x != nil {
		return x.ExperienceYears
	}
	return 0
}

func (x *DriverInput) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *DriverInput) GetEmergencyContactName() string {
	if x != nil {
		return x.EmergencyContactName
	}
	return ""
}

func (x *DriverInput) GetEmergencyContactPhone() string {
	if x != nil {
		return x.EmergencyContactPhone
	}
	return ""
}

func (x *DriverInput) GetHireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.HireDate
	}
	return nil
}

type CreateDriverRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        *DriverInput           `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDriverRequest) Reset() {
	*x = CreateDriverRequest{}
	mi := &file_staff_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriverRequest) ProtoMessage() {}

func (x *CreateDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriverRequest.ProtoReflect.Descriptor instead.
func (*CreateDriverRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDriverRequest) GetDriver() *DriverInput {
	if x != nil {
		return x.Driver
	}
	return nil
}

type CreateDriverResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        *Driver                `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDriverResponse) Reset() {
	*x = CreateDriverResponse{}
	mi := &file_staff_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDriverResponse) ProtoMessage() {}

func (x *CreateDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDriverResponse.ProtoReflect.Descriptor instead.
func (*CreateDriverResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDriverResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type GetDriverRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriverRequest) Reset() {
	*x = GetDriverRequest{}
	mi := &file_staff_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverRequest) ProtoMessage() {}

func (x *GetDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverRequest.ProtoReflect.Descriptor instead.
func (*GetDriverRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{4}
}

func (x *GetDriverRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type GetDriverByUserIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriverByUserIDRequest) Reset() {
	*x = GetDriverByUserIDRequest{}
	mi := &file_staff_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriverByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverByUserIDRequest) ProtoMessage() {}

func (x *GetDriverByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetDriverByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{5}
}

func (x *GetDriverByUserIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetDriverResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        *Driver                `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriverResponse) Reset() {
	*x = GetDriverResponse{}
	mi := &file_staff_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverResponse) ProtoMessage() {}

func (x *GetDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverResponse.ProtoReflect.Descriptor instead.
func (*GetDriverResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{6}
}

func (x *GetDriverResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type ListDriversRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PageSize            int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken           string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	StatusFilter        *DriverStatus          `protobuf:"varint,3,opt,name=status_filter,json=statusFilter,proto3,enum=staff.DriverStatus,oneof" json:"status_filter,omitempty"`
	LicenseClassFilter  *LicenseClass          `protobuf:"varint,4,opt,name=license_class_filter,json=licenseClassFilter,proto3,enum=staff.LicenseClass,oneof" json:"license_class_filter,omitempty"`
	LicenseExpiringSoon *bool                  `protobuf:"varint,5,opt,name=license_expiring_soon,json=licenseExpiringSoon,proto3,oneof" json:"license_expiring_soon,omitempty"` // Within 30 days
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListDriversRequest) Reset() {
	*x = ListDriversRequest{}
	mi := &file_staff_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDriversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriversRequest) ProtoMessage() {}

func (x *ListDriversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriversRequest.ProtoReflect.Descriptor instead.
func (*ListDriversRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{7}
}

func (x *ListDriversRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDriversRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDriversRequest) GetStatusFilter() DriverStatus {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return DriverStatus_STATUS_UNSPECIFIED
}

func (x *ListDriversRequest) GetLicenseClassFilter() LicenseClass {
	if x != nil && x.LicenseClassFilter != nil {
		return *x.LicenseClassFilter
	}
	return LicenseClass_LICENSE_UNSPECIFIED
}

func (x *ListDriversRequest) GetLicenseExpiringSoon() bool {
	if x != nil && x.LicenseExpiringSoon != nil {
		return *x.LicenseExpiringSoon
	}
	return false
}

type ListDriversResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Drivers       []*Driver              `protobuf:"bytes,1,rep,name=drivers,proto3" json:"drivers,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDriversResponse) Reset() {
	*x = ListDriversResponse{}
	mi := &file_staff_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDriversResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriversResponse) ProtoMessage() {}

func (x *ListDriversResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriversResponse.ProtoReflect.Descriptor instead.
func (*ListDriversResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{8}
}

func (x *ListDriversResponse) GetDrivers() []*Driver {
	if x != nil {
		return x.Drivers
	}
	return nil
}

func (x *ListDriversResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListDriversResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateDriverRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Driver        *DriverInput           `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriverRequest) Reset() {
	*x = UpdateDriverRequest{}
	mi := &file_staff_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverRequest) ProtoMessage() {}

func (x *UpdateDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverRequest.ProtoReflect.Descriptor instead.
func (*UpdateDriverRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateDriverRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *UpdateDriverRequest) GetDriver() *DriverInput {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *UpdateDriverRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateDriverResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        *Driver                `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriverResponse) Reset() {
	*x = UpdateDriverResponse{}
	mi := &file_staff_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverResponse) ProtoMessage() {}

func (x *UpdateDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverResponse.ProtoReflect.Descriptor instead.
func (*UpdateDriverResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDriverResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type DeleteDriverRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDriverRequest) Reset() {
	*x = DeleteDriverRequest{}
	mi := &file_staff_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDriverRequest) ProtoMessage() {}

func (x *DeleteDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDriverRequest.ProtoReflect.Descriptor instead.
func (*DeleteDriverRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDriverRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type UpdateDriverStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Status        DriverStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=staff.DriverStatus" json:"status,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"` // Optional reason for status change
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriverStatusRequest) Reset() {
	*x = UpdateDriverStatusRequest{}
	mi := &file_staff_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriverStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverStatusRequest) ProtoMessage() {}

func (x *UpdateDriverStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDriverStatusRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDriverStatusRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *UpdateDriverStatusRequest) GetStatus() DriverStatus {
	if x != nil {
		return x.Status
	}
	return DriverStatus_STATUS_UNSPECIFIED
}

func (x *UpdateDriverStatusRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateDriverStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        *Driver                `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriverStatusResponse) Reset() {
	*x = UpdateDriverStatusResponse{}
	mi := &file_staff_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriverStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverStatusResponse) ProtoMessage() {}

func (x *UpdateDriverStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDriverStatusResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateDriverStatusResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type GetActiveDriversRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PageSize           int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken          string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	LicenseClassFilter *LicenseClass          `protobuf:"varint,3,opt,name=license_class_filter,json=licenseClassFilter,proto3,enum=staff.LicenseClass,oneof" json:"license_class_filter,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetActiveDriversRequest) Reset() {
	*x = GetActiveDriversRequest{}
	mi := &file_staff_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveDriversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDriversRequest) ProtoMessage() {}

func (x *GetActiveDriversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDriversRequest.ProtoReflect.Descriptor instead.
func (*GetActiveDriversRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{14}
}

func (x *GetActiveDriversRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetActiveDriversRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetActiveDriversRequest) GetLicenseClassFilter() LicenseClass {
	if x != nil && x.LicenseClassFilter != nil {
		return *x.LicenseClassFilter
	}
	return LicenseClass_LICENSE_UNSPECIFIED
}

// ================= Driver Certification Messages =================
type DriverCertification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // certification ID
	DriverId          string                 `protobuf:"bytes,2,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	CertificationName string                 `protobuf:"bytes,3,opt,name=certification_name,json=certificationName,proto3" json:"certification_name,omitempty"`
	IssuedBy          string                 `protobuf:"bytes,4,opt,name=issued_by,json=issuedBy,proto3" json:"issued_by,omitempty"`
	IssueDate         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ExpiryDate        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	Status            CertificationStatus    `protobuf:"varint,7,opt,name=status,proto3,enum=staff.CertificationStatus" json:"status,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// Computed fields
	IsExpired       bool  `protobuf:"varint,10,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`
	DaysUntilExpiry int32 `protobuf:"varint,11,opt,name=days_until_expiry,json=daysUntilExpiry,proto3" json:"days_until_expiry,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DriverCertification) Reset() {
	*x = DriverCertification{}
	mi := &file_staff_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverCertification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCertification) ProtoMessage() {}

func (x *DriverCertification) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCertification.ProtoReflect.Descriptor instead.
func (*DriverCertification) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{15}
}

func (x *DriverCertification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DriverCertification) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *DriverCertification) GetCertificationName() string {
	if x != nil {
		return x.CertificationName
	}
	return ""
}

func (x *DriverCertification) GetIssuedBy() string {
	if x != nil {
		return x.IssuedBy
	}
	return ""
}

func (x *DriverCertification) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *DriverCertification) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *DriverCertification) GetStatus() CertificationStatus {
	if x != nil {
		return x.Status
	}
	return CertificationStatus_CERT_STATUS_UNSPECIFIED
}

func (x *DriverCertification) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DriverCertification) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DriverCertification) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *DriverCertification) GetDaysUntilExpiry() int32 {
	if x != nil {
		return x.DaysUntilExpiry
	}
	return 0
}

type CertificationInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CertificationName string                 `protobuf:"bytes,1,opt,name=certification_name,json=certificationName,proto3" json:"certification_name,omitempty"`
	IssuedBy          string                 `protobuf:"bytes,2,opt,name=issued_by,json=issuedBy,proto3" json:"issued_by,omitempty"`
	IssueDate         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	ExpiryDate        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CertificationInput) Reset() {
	*x = CertificationInput{}
	mi := &file_staff_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificationInput) ProtoMessage() {}

func (x *CertificationInput) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificationInput.ProtoReflect.Descriptor instead.
func (*CertificationInput) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{16}
}

func (x *CertificationInput) GetCertificationName() string {
	if x != nil {
		return x.CertificationName
	}
	return ""
}

func (x *CertificationInput) GetIssuedBy() string {
	if x != nil {
		return x.IssuedBy
	}
	return ""
}

func (x *CertificationInput) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *CertificationInput) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

type AddDriverCertificationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Certification *CertificationInput    `protobuf:"bytes,2,opt,name=certification,proto3" json:"certification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDriverCertificationRequest) Reset() {
	*x = AddDriverCertificationRequest{}
	mi := &file_staff_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDriverCertificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDriverCertificationRequest) ProtoMessage() {}

func (x *AddDriverCertificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDriverCertificationRequest.ProtoReflect.Descriptor instead.
func (*AddDriverCertificationRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{17}
}

func (x *AddDriverCertificationRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *AddDriverCertificationRequest) GetCertification() *CertificationInput {
	if x != nil {
		return x.Certification
	}
	return nil
}

type AddDriverCertificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certification *DriverCertification   `protobuf:"bytes,1,opt,name=certification,proto3" json:"certification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDriverCertificationResponse) Reset() {
	*x = AddDriverCertificationResponse{}
	mi := &file_staff_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDriverCertificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDriverCertificationResponse) ProtoMessage() {}

func (x *AddDriverCertificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDriverCertificationResponse.ProtoReflect.Descriptor instead.
func (*AddDriverCertificationResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{18}
}

func (x *AddDriverCertificationResponse) GetCertification() *DriverCertification {
	if x != nil {
		return x.Certification
	}
	return nil
}

type ListDriverCertificationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	StatusFilter  *CertificationStatus   `protobuf:"varint,4,opt,name=status_filter,json=statusFilter,proto3,enum=staff.CertificationStatus,oneof" json:"status_filter,omitempty"`
	ExpiringSoon  *bool                  `protobuf:"varint,5,opt,name=expiring_soon,json=expiringSoon,proto3,oneof" json:"expiring_soon,omitempty"` // Within 30 days
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDriverCertificationsRequest) Reset() {
	*x = ListDriverCertificationsRequest{}
	mi := &file_staff_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDriverCertificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriverCertificationsRequest) ProtoMessage() {}

func (x *ListDriverCertificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriverCertificationsRequest.ProtoReflect.Descriptor instead.
func (*ListDriverCertificationsRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{19}
}

func (x *ListDriverCertificationsRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *ListDriverCertificationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDriverCertificationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDriverCertificationsRequest) GetStatusFilter() CertificationStatus {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return CertificationStatus_CERT_STATUS_UNSPECIFIED
}

func (x *ListDriverCertificationsRequest) GetExpiringSoon() bool {
	if x != nil && x.ExpiringSoon != nil {
		return *x.ExpiringSoon
	}
	return false
}

type ListDriverCertificationsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Certifications []*DriverCertification `protobuf:"bytes,1,rep,name=certifications,proto3" json:"certifications,omitempty"`
	NextPageToken  string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListDriverCertificationsResponse) Reset() {
	*x = ListDriverCertificationsResponse{}
	mi := &file_staff_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDriverCertificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriverCertificationsResponse) ProtoMessage() {}

func (x *ListDriverCertificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriverCertificationsResponse.ProtoReflect.Descriptor instead.
func (*ListDriverCertificationsResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{20}
}

func (x *ListDriverCertificationsResponse) GetCertifications() []*DriverCertification {
	if x != nil {
		return x.Certifications
	}
	return nil
}

func (x *ListDriverCertificationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateCertificationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CertificationId string                 `protobuf:"bytes,1,opt,name=certification_id,json=certificationId,proto3" json:"certification_id,omitempty"`
	Certification   *CertificationInput    `protobuf:"bytes,2,opt,name=certification,proto3" json:"certification,omitempty"`
	UpdateMask      *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateCertificationRequest) Reset() {
	*x = UpdateCertificationRequest{}
	mi := &file_staff_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCertificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCertificationRequest) ProtoMessage() {}

func (x *UpdateCertificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCertificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateCertificationRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateCertificationRequest) GetCertificationId() string {
	if x != nil {
		return x.CertificationId
	}
	return ""
}

func (x *UpdateCertificationRequest) GetCertification() *CertificationInput {
	if x != nil {
		return x.Certification
	}
	return nil
}

func (x *UpdateCertificationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateCertificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certification *DriverCertification   `protobuf:"bytes,1,opt,name=certification,proto3" json:"certification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCertificationResponse) Reset() {
	*x = UpdateCertificationResponse{}
	mi := &file_staff_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCertificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCertificationResponse) ProtoMessage() {}

func (x *UpdateCertificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCertificationResponse.ProtoReflect.Descriptor instead.
func (*UpdateCertificationResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateCertificationResponse) GetCertification() *DriverCertification {
	if x != nil {
		return x.Certification
	}
	return nil
}

type DeleteCertificationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CertificationId string                 `protobuf:"bytes,1,opt,name=certification_id,json=certificationId,proto3" json:"certification_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteCertificationRequest) Reset() {
	*x = DeleteCertificationRequest{}
	mi := &file_staff_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCertificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCertificationRequest) ProtoMessage() {}

func (x *DeleteCertificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCertificationRequest.ProtoReflect.Descriptor instead.
func (*DeleteCertificationRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteCertificationRequest) GetCertificationId() string {
	if x != nil {
		return x.CertificationId
	}
	return ""
}

// ================= Verification and Compliance Messages =================
type VerifyDriverLicenseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	LicenseNumber string                 `protobuf:"bytes,2,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"` // For verification against external systems
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyDriverLicenseRequest) Reset() {
	*x = VerifyDriverLicenseRequest{}
	mi := &file_staff_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyDriverLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyDriverLicenseRequest) ProtoMessage() {}

func (x *VerifyDriverLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyDriverLicenseRequest.ProtoReflect.Descriptor instead.
func (*VerifyDriverLicenseRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{24}
}

func (x *VerifyDriverLicenseRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *VerifyDriverLicenseRequest) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

type VerifyDriverLicenseResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IsValid            bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsExpired          bool                   `protobuf:"varint,2,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`
	VerificationSource string                 `protobuf:"bytes,3,opt,name=verification_source,json=verificationSource,proto3" json:"verification_source,omitempty"`
	VerifiedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	Notes              string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VerifyDriverLicenseResponse) Reset() {
	*x = VerifyDriverLicenseResponse{}
	mi := &file_staff_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyDriverLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyDriverLicenseResponse) ProtoMessage() {}

func (x *VerifyDriverLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyDriverLicenseResponse.ProtoReflect.Descriptor instead.
func (*VerifyDriverLicenseResponse) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{25}
}

func (x *VerifyDriverLicenseResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VerifyDriverLicenseResponse) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *VerifyDriverLicenseResponse) GetVerificationSource() string {
	if x != nil {
		return x.VerificationSource
	}
	return ""
}

func (x *VerifyDriverLicenseResponse) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *VerifyDriverLicenseResponse) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type GetExpiringLicensesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DaysAhead     int32                  `protobuf:"varint,1,opt,name=days_ahead,json=daysAhead,proto3" json:"days_ahead,omitempty"` // Default 30 days
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExpiringLicensesRequest) Reset() {
	*x = GetExpiringLicensesRequest{}
	mi := &file_staff_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExpiringLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpiringLicensesRequest) ProtoMessage() {}

func (x *GetExpiringLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpiringLicensesRequest.ProtoReflect.Descriptor instead.
func (*GetExpiringLicensesRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{26}
}

func (x *GetExpiringLicensesRequest) GetDaysAhead() int32 {
	if x != nil {
		return x.DaysAhead
	}
	return 0
}

func (x *GetExpiringLicensesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetExpiringLicensesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetExpiredCertificationsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PageSize         int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken        string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	ExpiredSinceDays *int32                 `protobuf:"varint,3,opt,name=expired_since_days,json=expiredSinceDays,proto3,oneof" json:"expired_since_days,omitempty"` // Expired within X days
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetExpiredCertificationsRequest) Reset() {
	*x = GetExpiredCertificationsRequest{}
	mi := &file_staff_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExpiredCertificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpiredCertificationsRequest) ProtoMessage() {}

func (x *GetExpiredCertificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staff_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpiredCertificationsRequest.ProtoReflect.Descriptor instead.
func (*GetExpiredCertificationsRequest) Descriptor() ([]byte, []int) {
	return file_staff_proto_rawDescGZIP(), []int{27}
}

func (x *GetExpiredCertificationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetExpiredCertificationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetExpiredCertificationsRequest) GetExpiredSinceDays() int32 {
	if x != nil && x.ExpiredSinceDays != nil {
		return *x.ExpiredSinceDays
	}
	return 0
}

var File_staff_proto protoreflect.FileDescriptor

const file_staff_proto_rawDesc = "" +
	"\n" +
	"\vstaff.proto\x12\x05staff\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\"\xa9\x06\n" +
	"\x06Driver\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12%\n" +
	"\x0elicense_number\x18\x03 \x01(\tR\rlicenseNumber\x128\n" +
	"\rlicense_class\x18\x04 \x01(\x0e2\x13.staff.LicenseClassR\flicenseClass\x12A\n" +
	"\x0elicense_expiry\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rlicenseExpiry\x12)\n" +
	"\x10experience_years\x18\x06 \x01(\x05R\x0fexperienceYears\x12!\n" +
	"\fphone_number\x18\a \x01(\tR\vphoneNumber\x124\n" +
	"\x16emergency_contact_name\x18\b \x01(\tR\x14emergencyContactName\x126\n" +
	"\x17emergency_contact_phone\x18\t \x01(\tR\x15emergencyContactPhone\x12+\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x13.staff.DriverStatusR\x06status\x127\n" +
	"\thire_date\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\bhireDate\x129\n" +
	"\n" +
	"created_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12>\n" +
	"\n" +
	"updated_at\x18\r \x01(\v2\x1a.google.protobuf.TimestampH\x00R\tupdatedAt\x88\x01\x01\x12'\n" +
	"\x0flicense_expired\x18\x0e \x01(\bR\x0elicenseExpired\x129\n" +
	"\x19days_until_license_expiry\x18\x0f \x01(\x05R\x16daysUntilLicenseExpiry\x12B\n" +
	"\x0ecertifications\x18\x10 \x03(\v2\x1a.staff.DriverCertificationR\x0ecertificationsB\r\n" +
	"\v_updated_at\"\xbf\x03\n" +
	"\vDriverInput\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12%\n" +
	"\x0elicense_number\x18\x02 \x01(\tR\rlicenseNumber\x128\n" +
	"\rlicense_class\x18\x03 \x01(\x0e2\x13.staff.LicenseClassR\flicenseClass\x12A\n" +
	"\x0elicense_expiry\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rlicenseExpiry\x12)\n" +
	"\x10experience_years\x18\x05 \x01(\x05R\x0fexperienceYears\x12!\n" +
	"\fphone_number\x18\x06 \x01(\tR\vphoneNumber\x124\n" +
	"\x16emergency_contact_name\x18\a \x01(\tR\x14emergencyContactName\x126\n" +
	"\x17emergency_contact_phone\x18\b \x01(\tR\x15emergencyContactPhone\x127\n" +
	"\thire_date\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\bhireDate\"A\n" +
	"\x13CreateDriverRequest\x12*\n" +
	"\x06driver\x18\x01 \x01(\v2\x12.staff.DriverInputR\x06driver\"=\n" +
	"\x14CreateDriverResponse\x12%\n" +
	"\x06driver\x18\x01 \x01(\v2\r.staff.DriverR\x06driver\"/\n" +
	"\x10GetDriverRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\"3\n" +
	"\x18GetDriverByUserIDRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\":\n" +
	"\x11GetDriverResponse\x12%\n" +
	"\x06driver\x18\x01 \x01(\v2\r.staff.DriverR\x06driver\"\xd9\x02\n" +
	"\x12ListDriversRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12=\n" +
	"\rstatus_filter\x18\x03 \x01(\x0e2\x13.staff.DriverStatusH\x00R\fstatusFilter\x88\x01\x01\x12J\n" +
	"\x14license_class_filter\x18\x04 \x01(\x0e2\x13.staff.LicenseClassH\x01R\x12licenseClassFilter\x88\x01\x01\x127\n" +
	"\x15license_expiring_soon\x18\x05 \x01(\bH\x02R\x13licenseExpiringSoon\x88\x01\x01B\x10\n" +
	"\x0e_status_filterB\x17\n" +
	"\x15_license_class_filterB\x18\n" +
	"\x16_license_expiring_soon\"\x87\x01\n" +
	"\x13ListDriversResponse\x12'\n" +
	"\adrivers\x18\x01 \x03(\v2\r.staff.DriverR\adrivers\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCount\"\x9b\x01\n" +
	"\x13UpdateDriverRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12*\n" +
	"\x06driver\x18\x02 \x01(\v2\x12.staff.DriverInputR\x06driver\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"=\n" +
	"\x14UpdateDriverResponse\x12%\n" +
	"\x06driver\x18\x01 \x01(\v2\r.staff.DriverR\x06driver\"2\n" +
	"\x13DeleteDriverRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\"}\n" +
	"\x19UpdateDriverStatusRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12+\n" +
	"\x06status\x18\x02 \x01(\x0e2\x13.staff.DriverStatusR\x06status\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"C\n" +
	"\x1aUpdateDriverStatusResponse\x12%\n" +
	"\x06driver\x18\x01 \x01(\v2\r.staff.DriverR\x06driver\"\xba\x01\n" +
	"\x17GetActiveDriversRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12J\n" +
	"\x14license_class_filter\x18\x03 \x01(\x0e2\x13.staff.LicenseClassH\x00R\x12licenseClassFilter\x88\x01\x01B\x17\n" +
	"\x15_license_class_filter\"\x8f\x04\n" +
	"\x13DriverCertification\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tdriver_id\x18\x02 \x01(\tR\bdriverId\x12-\n" +
	"\x12certification_name\x18\x03 \x01(\tR\x11certificationName\x12\x1b\n" +
	"\tissued_by\x18\x04 \x01(\tR\bissuedBy\x129\n" +
	"\n" +
	"issue_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tissueDate\x12;\n" +
	"\vexpiry_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiryDate\x122\n" +
	"\x06status\x18\a \x01(\x0e2\x1a.staff.CertificationStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12>\n" +
	"\n" +
	"updated_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\x00R\tupdatedAt\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"is_expired\x18\n" +
	" \x01(\bR\tisExpired\x12*\n" +
	"\x11days_until_expiry\x18\v \x01(\x05R\x0fdaysUntilExpiryB\r\n" +
	"\v_updated_at\"\xd8\x01\n" +
	"\x12CertificationInput\x12-\n" +
	"\x12certification_name\x18\x01 \x01(\tR\x11certificationName\x12\x1b\n" +
	"\tissued_by\x18\x02 \x01(\tR\bissuedBy\x129\n" +
	"\n" +
	"issue_date\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tissueDate\x12;\n" +
	"\vexpiry_date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiryDate\"}\n" +
	"\x1dAddDriverCertificationRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12?\n" +
	"\rcertification\x18\x02 \x01(\v2\x19.staff.CertificationInputR\rcertification\"b\n" +
	"\x1eAddDriverCertificationResponse\x12@\n" +
	"\rcertification\x18\x01 \x01(\v2\x1a.staff.DriverCertificationR\rcertification\"\x8e\x02\n" +
	"\x1fListDriverCertificationsRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12D\n" +
	"\rstatus_filter\x18\x04 \x01(\x0e2\x1a.staff.CertificationStatusH\x00R\fstatusFilter\x88\x01\x01\x12(\n" +
	"\rexpiring_soon\x18\x05 \x01(\bH\x01R\fexpiringSoon\x88\x01\x01B\x10\n" +
	"\x0e_status_filterB\x10\n" +
	"\x0e_expiring_soon\"\x8e\x01\n" +
	" ListDriverCertificationsResponse\x12B\n" +
	"\x0ecertifications\x18\x01 \x03(\v2\x1a.staff.DriverCertificationR\x0ecertifications\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xc5\x01\n" +
	"\x1aUpdateCertificationRequest\x12)\n" +
	"\x10certification_id\x18\x01 \x01(\tR\x0fcertificationId\x12?\n" +
	"\rcertification\x18\x02 \x01(\v2\x19.staff.CertificationInputR\rcertification\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"_\n" +
	"\x1bUpdateCertificationResponse\x12@\n" +
	"\rcertification\x18\x01 \x01(\v2\x1a.staff.DriverCertificationR\rcertification\"G\n" +
	"\x1aDeleteCertificationRequest\x12)\n" +
	"\x10certification_id\x18\x01 \x01(\tR\x0fcertificationId\"`\n" +
	"\x1aVerifyDriverLicenseRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12%\n" +
	"\x0elicense_number\x18\x02 \x01(\tR\rlicenseNumber\"\xdb\x01\n" +
	"\x1bVerifyDriverLicenseResponse\x12\x19\n" +
	"\bis_valid\x18\x01 \x01(\bR\aisValid\x12\x1d\n" +
	"\n" +
	"is_expired\x18\x02 \x01(\bR\tisExpired\x12/\n" +
	"\x13verification_source\x18\x03 \x01(\tR\x12verificationSource\x12;\n" +
	"\vverified_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"verifiedAt\x12\x14\n" +
	"\x05notes\x18\x05 \x01(\tR\x05notes\"w\n" +
	"\x1aGetExpiringLicensesRequest\x12\x1d\n" +
	"\n" +
	"days_ahead\x18\x01 \x01(\x05R\tdaysAhead\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\xa7\x01\n" +
	"\x1fGetExpiredCertificationsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x121\n" +
	"\x12expired_since_days\x18\x03 \x01(\x05H\x00R\x10expiredSinceDays\x88\x01\x01B\x15\n" +
	"\x13_expired_since_days*i\n" +
	"\fDriverStatus\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14PENDING_VERIFICATION\x10\x01\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x02\x12\r\n" +
	"\tSUSPENDED\x10\x03\x12\f\n" +
	"\bINACTIVE\x10\x04*h\n" +
	"\fLicenseClass\x12\x17\n" +
	"\x13LICENSE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aCLASS_A\x10\x01\x12\v\n" +
	"\aCLASS_B\x10\x02\x12\v\n" +
	"\aCLASS_C\x10\x03\x12\v\n" +
	"\aCLASS_D\x10\x04\x12\v\n" +
	"\aCLASS_E\x10\x05*{\n" +
	"\x13CertificationStatus\x12\x1b\n" +
	"\x17CERT_STATUS_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vCERT_ACTIVE\x10\x01\x12\x10\n" +
	"\fCERT_EXPIRED\x10\x02\x12\x12\n" +
	"\x0eCERT_SUSPENDED\x10\x03\x12\x10\n" +
	"\fCERT_REVOKED\x10\x042\x8a\n" +
	"\n" +
	"\fStaffService\x12G\n" +
	"\fCreateDriver\x12\x1a.staff.CreateDriverRequest\x1a\x1b.staff.CreateDriverResponse\x12>\n" +
	"\tGetDriver\x12\x17.staff.GetDriverRequest\x1a\x18.staff.GetDriverResponse\x12N\n" +
	"\x11GetDriverByUserID\x12\x1f.staff.GetDriverByUserIDRequest\x1a\x18.staff.GetDriverResponse\x12D\n" +
	"\vListDrivers\x12\x19.staff.ListDriversRequest\x1a\x1a.staff.ListDriversResponse\x12G\n" +
	"\fUpdateDriver\x12\x1a.staff.UpdateDriverRequest\x1a\x1b.staff.UpdateDriverResponse\x12B\n" +
	"\fDeleteDriver\x12\x1a.staff.DeleteDriverRequest\x1a\x16.google.protobuf.Empty\x12Y\n" +
	"\x12UpdateDriverStatus\x12 .staff.UpdateDriverStatusRequest\x1a!.staff.UpdateDriverStatusResponse\x12N\n" +
	"\x10GetActiveDrivers\x12\x1e.staff.GetActiveDriversRequest\x1a\x1a.staff.ListDriversResponse\x12e\n" +
	"\x16AddDriverCertification\x12$.staff.AddDriverCertificationRequest\x1a%.staff.AddDriverCertificationResponse\x12k\n" +
	"\x18ListDriverCertifications\x12&.staff.ListDriverCertificationsRequest\x1a'.staff.ListDriverCertificationsResponse\x12\\\n" +
	"\x13UpdateCertification\x12!.staff.UpdateCertificationRequest\x1a\".staff.UpdateCertificationResponse\x12P\n" +
	"\x13DeleteCertification\x12!.staff.DeleteCertificationRequest\x1a\x16.google.protobuf.Empty\x12\\\n" +
	"\x13VerifyDriverLicense\x12!.staff.VerifyDriverLicenseRequest\x1a\".staff.VerifyDriverLicenseResponse\x12T\n" +
	"\x13GetExpiringLicenses\x12!.staff.GetExpiringLicensesRequest\x1a\x1a.staff.ListDriversResponse\x12k\n" +
	"\x18GetExpiredCertifications\x12&.staff.GetExpiredCertificationsRequest\x1a'.staff.ListDriverCertificationsResponseB9Z7github.com/adammwaniki/bebabeba/services/staff/genprotob\x06proto3"

var (
	file_staff_proto_rawDescOnce sync.Once
	file_staff_proto_rawDescData []byte
)

func file_staff_proto_rawDescGZIP() []byte {
	file_staff_proto_rawDescOnce.Do(func() {
		file_staff_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_staff_proto_rawDesc), len(file_staff_proto_rawDesc)))
	})
	return file_staff_proto_rawDescData
}

var file_staff_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_staff_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_staff_proto_goTypes = []any{
	(DriverStatus)(0),                        // 0: staff.DriverStatus
	(LicenseClass)(0),                        // 1: staff.LicenseClass
	(CertificationStatus)(0),                 // 2: staff.CertificationStatus
	(*Driver)(nil),                           // 3: staff.Driver
	(*DriverInput)(nil),                      // 4: staff.DriverInput
	(*CreateDriverRequest)(nil),              // 5: staff.CreateDriverRequest
	(*CreateDriverResponse)(nil),             // 6: staff.CreateDriverResponse
	(*GetDriverRequest)(nil),                 // 7: staff.GetDriverRequest
	(*GetDriverByUserIDRequest)(nil),         // 8: staff.GetDriverByUserIDRequest
	(*GetDriverResponse)(nil),                // 9: staff.GetDriverResponse
	(*ListDriversRequest)(nil),               // 10: staff.ListDriversRequest
	(*ListDriversResponse)(nil),              // 11: staff.ListDriversResponse
	(*UpdateDriverRequest)(nil),              // 12: staff.UpdateDriverRequest
	(*UpdateDriverResponse)(nil),             // 13: staff.UpdateDriverResponse
	(*DeleteDriverRequest)(nil),              // 14: staff.DeleteDriverRequest
	(*UpdateDriverStatusRequest)(nil),        // 15: staff.UpdateDriverStatusRequest
	(*UpdateDriverStatusResponse)(nil),       // 16: staff.UpdateDriverStatusResponse
	(*GetActiveDriversRequest)(nil),          // 17: staff.GetActiveDriversRequest
	(*DriverCertification)(nil),              // 18: staff.DriverCertification
	(*CertificationInput)(nil),               // 19: staff.CertificationInput
	(*AddDriverCertificationRequest)(nil),    // 20: staff.AddDriverCertificationRequest
	(*AddDriverCertificationResponse)(nil),   // 21: staff.AddDriverCertificationResponse
	(*ListDriverCertificationsRequest)(nil),  // 22: staff.ListDriverCertificationsRequest
	(*ListDriverCertificationsResponse)(nil), // 23: staff.ListDriverCertificationsResponse
	(*UpdateCertificationRequest)(nil),       // 24: staff.UpdateCertificationRequest
	(*UpdateCertificationResponse)(nil),      // 25: staff.UpdateCertificationResponse
	(*DeleteCertificationRequest)(nil),       // 26: staff.DeleteCertificationRequest
	(*VerifyDriverLicenseRequest)(nil),       // 27: staff.VerifyDriverLicenseRequest
	(*VerifyDriverLicenseResponse)(nil),      // 28: staff.VerifyDriverLicenseResponse
	(*GetExpiringLicensesRequest)(nil),       // 29: staff.GetExpiringLicensesRequest
	(*GetExpiredCertificationsRequest)(nil),  // 30: staff.GetExpiredCertificationsRequest
	(*timestamppb.Timestamp)(nil),            // 31: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),            // 32: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                    // 33: google.protobuf.Empty
}
var file_staff_proto_depIdxs = []int32{
	1,  // 0: staff.Driver.license_class:type_name -> staff.LicenseClass
	31, // 1: staff.Driver.license_expiry:type_name -> google.protobuf.Timestamp
	0,  // 2: staff.Driver.status:type_name -> staff.DriverStatus
	31, // 3: staff.Driver.hire_date:type_name -> google.protobuf.Timestamp
	31, // 4: staff.Driver.created_at:type_name -> google.protobuf.Timestamp
	31, // 5: staff.Driver.updated_at:type_name -> google.protobuf.Timestamp
	18, // 6: staff.Driver.certifications:type_name -> staff.DriverCertification
	1,  // 7: staff.DriverInput.license_class:type_name -> staff.LicenseClass
	31, // 8: staff.DriverInput.license_expiry:type_name -> google.protobuf.Timestamp
	31, // 9: staff.DriverInput.hire_date:type_name -> google.protobuf.Timestamp
	4,  // 10: staff.CreateDriverRequest.driver:type_name -> staff.DriverInput
	3,  // 11: staff.CreateDriverResponse.driver:type_name -> staff.Driver
	3,  // 12: staff.GetDriverResponse.driver:type_name -> staff.Driver
	0,  // 13: staff.ListDriversRequest.status_filter:type_name -> staff.DriverStatus
	1,  // 14: staff.ListDriversRequest.license_class_filter:type_name -> staff.LicenseClass
	3,  // 15: staff.ListDriversResponse.drivers:type_name -> staff.Driver
	4,  // 16: staff.UpdateDriverRequest.driver:type_name -> staff.DriverInput
	32, // 17: staff.UpdateDriverRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 18: staff.UpdateDriverResponse.driver:type_name -> staff.Driver
	0,  // 19: staff.UpdateDriverStatusRequest.status:type_name -> staff.DriverStatus
	3,  // 20: staff.UpdateDriverStatusResponse.driver:type_name -> staff.Driver
	1,  // 21: staff.GetActiveDriversRequest.license_class_filter:type_name -> staff.LicenseClass
	31, // 22: staff.DriverCertification.issue_date:type_name -> google.protobuf.Timestamp
	31, // 23: staff.DriverCertification.expiry_date:type_name -> google.protobuf.Timestamp
	2,  // 24: staff.DriverCertification.status:type_name -> staff.CertificationStatus
	31, // 25: staff.DriverCertification.created_at:type_name -> google.protobuf.Timestamp
	31, // 26: staff.DriverCertification.updated_at:type_name -> google.protobuf.Timestamp
	31, // 27: staff.CertificationInput.issue_date:type_name -> google.protobuf.Timestamp
	31, // 28: staff.CertificationInput.expiry_date:type_name -> google.protobuf.Timestamp
	19, // 29: staff.AddDriverCertificationRequest.certification:type_name -> staff.CertificationInput
	18, // 30: staff.AddDriverCertificationResponse.certification:type_name -> staff.DriverCertification
	2,  // 31: staff.ListDriverCertificationsRequest.status_filter:type_name -> staff.CertificationStatus
	18, // 32: staff.ListDriverCertificationsResponse.certifications:type_name -> staff.DriverCertification
	19, // 33: staff.UpdateCertificationRequest.certification:type_name -> staff.CertificationInput
	32, // 34: staff.UpdateCertificationRequest.update_mask:type_name -> google.protobuf.FieldMask
	18, // 35: staff.UpdateCertificationResponse.certification:type_name -> staff.DriverCertification
	31, // 36: staff.VerifyDriverLicenseResponse.verified_at:type_name -> google.protobuf.Timestamp
	5,  // 37: staff.StaffService.CreateDriver:input_type -> staff.CreateDriverRequest
	7,  // 38: staff.StaffService.GetDriver:input_type -> staff.GetDriverRequest
	8,  // 39: staff.StaffService.GetDriverByUserID:input_type -> staff.GetDriverByUserIDRequest
	10, // 40: staff.StaffService.ListDrivers:input_type -> staff.ListDriversRequest
	12, // 41: staff.StaffService.UpdateDriver:input_type -> staff.UpdateDriverRequest
	14, // 42: staff.StaffService.DeleteDriver:input_type -> staff.DeleteDriverRequest
	15, // 43: staff.StaffService.UpdateDriverStatus:input_type -> staff.UpdateDriverStatusRequest
	17, // 44: staff.StaffService.GetActiveDrivers:input_type -> staff.GetActiveDriversRequest
	20, // 45: staff.StaffService.AddDriverCertification:input_type -> staff.AddDriverCertificationRequest
	22, // 46: staff.StaffService.ListDriverCertifications:input_type -> staff.ListDriverCertificationsRequest
	24, // 47: staff.StaffService.UpdateCertification:input_type -> staff.UpdateCertificationRequest
	26, // 48: staff.StaffService.DeleteCertification:input_type -> staff.DeleteCertificationRequest
	27, // 49: staff.StaffService.VerifyDriverLicense:input_type -> staff.VerifyDriverLicenseRequest
	29, // 50: staff.StaffService.GetExpiringLicenses:input_type -> staff.GetExpiringLicensesRequest
	30, // 51: staff.StaffService.GetExpiredCertifications:input_type -> staff.GetExpiredCertificationsRequest
	6,  // 52: staff.StaffService.CreateDriver:output_type -> staff.CreateDriverResponse
	9,  // 53: staff.StaffService.GetDriver:output_type -> staff.GetDriverResponse
	9,  // 54: staff.StaffService.GetDriverByUserID:output_type -> staff.GetDriverResponse
	11, // 55: staff.StaffService.ListDrivers:output_type -> staff.ListDriversResponse
	13, // 56: staff.StaffService.UpdateDriver:output_type -> staff.UpdateDriverResponse
	33, // 57: staff.StaffService.DeleteDriver:output_type -> google.protobuf.Empty
	16, // 58: staff.StaffService.UpdateDriverStatus:output_type -> staff.UpdateDriverStatusResponse
	11, // 59: staff.StaffService.GetActiveDrivers:output_type -> staff.ListDriversResponse
	21, // 60: staff.StaffService.AddDriverCertification:output_type -> staff.AddDriverCertificationResponse
	23, // 61: staff.StaffService.ListDriverCertifications:output_type -> staff.ListDriverCertificationsResponse
	25, // 62: staff.StaffService.UpdateCertification:output_type -> staff.UpdateCertificationResponse
	33, // 63: staff.StaffService.DeleteCertification:output_type -> google.protobuf.Empty
	28, // 64: staff.StaffService.VerifyDriverLicense:output_type -> staff.VerifyDriverLicenseResponse
	11, // 65: staff.StaffService.GetExpiringLicenses:output_type -> staff.ListDriversResponse
	23, // 66: staff.StaffService.GetExpiredCertifications:output_type -> staff.ListDriverCertificationsResponse
	52, // [52:67] is the sub-list for method output_type
	37, // [37:52] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_staff_proto_init() }
func file_staff_proto_init() {
	if File_staff_proto != nil {
		return
	}
	file_staff_proto_msgTypes[0].OneofWrappers = []any{}
	file_staff_proto_msgTypes[7].OneofWrappers = []any{}
	file_staff_proto_msgTypes[14].OneofWrappers = []any{}
	file_staff_proto_msgTypes[15].OneofWrappers = []any{}
	file_staff_proto_msgTypes[19].OneofWrappers = []any{}
	file_staff_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_staff_proto_rawDesc), len(file_staff_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_staff_proto_goTypes,
		DependencyIndexes: file_staff_proto_depIdxs,
		EnumInfos:         file_staff_proto_enumTypes,
		MessageInfos:      file_staff_proto_msgTypes,
	}.Build()
	File_staff_proto = out.File
	file_staff_proto_goTypes = nil
	file_staff_proto_depIdxs = nil
}
